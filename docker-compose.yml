version: '3.8'

services:
  # Scheduled opportunity collector
  collector:
    build: .
    command: ["sh", "-c", "govbizops schedule --interval $${COLLECTION_INTERVAL:-60} --analyze --max-analyze $${MAX_ANALYZE:-5}"]
    environment:
      - SAM_GOV_API_KEY=${SAM_GOV_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - NAICS_CODES=${NAICS_CODES:-}
      - COLLECTION_INTERVAL=${COLLECTION_INTERVAL:-60}
      - MAX_ANALYZE=${MAX_ANALYZE:-5}
      - GOVBIZOPS_SERVER_MODE=true
      - PYTHONUNBUFFERED=1
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    restart: unless-stopped
    mem_limit: 2g
    cpus: 1.0
    shm_size: 1g
    cap_add:
      - SYS_ADMIN
    healthcheck:
      test: ["CMD", "python", "-c", "import os; exit(0 if os.path.exists('/app/data/opportunities.json') else 1)"]
      interval: 300s  # Check every 5 minutes
      timeout: 10s
      retries: 3
      start_period: 120s
  
  # Web viewer for browsing collected opportunities
  viewer:
    build: .
    command: ["govbizops", "viewer", "--port", "5000"]
    environment:
      - SAM_GOV_API_KEY=${SAM_GOV_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PYTHONUNBUFFERED=1
    volumes:
      - ./data:/app/data:ro  # Read-only access to data
      - ./logs:/app/logs
    ports:
      - "5000:5000"
    restart: unless-stopped
    mem_limit: 512m  # Viewer needs less memory
    cpus: 0.5
    depends_on:
      - collector
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5000', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
  
  # One-time analyzer (can be scaled up for batch processing)
  analyzer:
    build: .
    # This service doesn't run by default - use docker-compose run analyzer
    command: ["govbizops", "analyze", "--opportunity-file", "/app/data/opportunities.json", "--max-analyze", "10"]
    environment:
      - SAM_GOV_API_KEY=${SAM_GOV_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOVBIZOPS_SERVER_MODE=true
      - PYTHONUNBUFFERED=1
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    mem_limit: 2g
    cpus: 1.0
    shm_size: 1g
    cap_add:
      - SYS_ADMIN
    profiles:
      - manual  # Only run when explicitly requested
  
  # Redis for caching scraped data (optional)
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - cache
    
  # PostgreSQL for persistent storage (optional)
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=govbizops
      - POSTGRES_USER=govbizops
      - POSTGRES_PASSWORD=${DB_PASSWORD:-changeme}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U govbizops"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - database
    
  # Nginx for load balancing (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - viewer
    restart: unless-stopped
    profiles:
      - loadbalancer

volumes:
  postgres_data:
  redis_data: